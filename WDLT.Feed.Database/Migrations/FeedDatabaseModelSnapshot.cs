// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WDLT.Feed.Database;

namespace WDLT.Feed.Database.Migrations
{
    [DbContext(typeof(FeedDatabase))]
    partial class FeedDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBBlacklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId", "Word")
                        .IsUnique();

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasImage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasRepost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasVideo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Header")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBookmark")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalUrl")
                        .HasColumnType("TEXT");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsBookmark");

                    b.HasIndex("IsViewed");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("CardId", "SubscriptionId")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Source");

                    b.HasIndex("SourceId", "Source")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBBlacklist", b =>
                {
                    b.HasOne("WDLT.Feed.Database.Entities.DBSubscription", "Subscription")
                        .WithMany("Blacklist")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBCard", b =>
                {
                    b.HasOne("WDLT.Feed.Database.Entities.DBSubscription", "Subscription")
                        .WithMany("Cards")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("WDLT.Feed.Database.Entities.DBSubscription", b =>
                {
                    b.Navigation("Blacklist");

                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
